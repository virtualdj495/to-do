{"ast":null,"code":"import * as moment from 'moment';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatSort } from '@angular/material/sort';\nimport { MatDialogConfig } from '@angular/material/dialog';\nimport { findIndex } from 'lodash';\nimport { DialogBoxComponent } from '../dialog-box/dialog-box.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../objectives.service\";\nimport * as i2 from \"@angular/material/dialog\";\nimport * as i3 from \"@angular/material/button\";\nimport * as i4 from \"@angular/material/table\";\nimport * as i5 from \"@angular/material/sort\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"@angular/router\";\nimport * as i8 from \"@angular/material/checkbox\";\n\nfunction ToDoComponent_th_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 13);\n    i0.ɵɵtext(1, \" Name \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nconst _c0 = function (a0) {\n  return {\n    \"background-color\": a0\n  };\n};\n\nfunction ToDoComponent_td_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 14);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const task_r12 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵpropertyInterpolate1(\"routerLink\", \"/tasks-list/\", task_r12.id, \"\");\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(3, _c0, ctx_r1.addColor(task_r12)));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", task_r12.name, \" \");\n  }\n}\n\nfunction ToDoComponent_th_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 15);\n    i0.ɵɵtext(1, \" Date \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ToDoComponent_td_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 16);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const task_r13 = ctx.$implicit;\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(2, _c0, ctx_r3.addColor(task_r13)));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", task_r13.endDate, \" \");\n  }\n}\n\nfunction ToDoComponent_th_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 13);\n    i0.ɵɵtext(1, \" Edit\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ToDoComponent_td_16_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r16 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"td\", 16);\n    i0.ɵɵelementStart(1, \"button\", 0);\n    i0.ɵɵlistener(\"click\", function ToDoComponent_td_16_Template_button_click_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r16);\n      const task_r14 = restoredCtx.$implicit;\n      const ctx_r15 = i0.ɵɵnextContext();\n      return ctx_r15.editTask(task_r14.id);\n    });\n    i0.ɵɵtext(2, \"Edit\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const task_r14 = ctx.$implicit;\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(1, _c0, ctx_r5.addColor(task_r14)));\n  }\n}\n\nfunction ToDoComponent_th_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 13);\n    i0.ɵɵtext(1, \" Check\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ToDoComponent_td_19_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r19 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"td\", 16);\n    i0.ɵɵelementStart(1, \"mat-checkbox\", 17);\n    i0.ɵɵlistener(\"click\", function ToDoComponent_td_19_Template_mat_checkbox_click_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r19);\n      const task_r17 = restoredCtx.$implicit;\n      const ctx_r18 = i0.ɵɵnextContext();\n      return ctx_r18.switchTask(task_r17);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const task_r17 = ctx.$implicit;\n    const ctx_r7 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(1, _c0, ctx_r7.addColor(task_r17)));\n  }\n}\n\nfunction ToDoComponent_th_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 13);\n    i0.ɵɵtext(1, \" Delete \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ToDoComponent_td_22_button_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r24 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 0);\n    i0.ɵɵlistener(\"click\", function ToDoComponent_td_22_button_1_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r24);\n      const task_r20 = i0.ɵɵnextContext().$implicit;\n      const ctx_r22 = i0.ɵɵnextContext();\n      return ctx_r22.deleteTask(task_r20);\n    });\n    i0.ɵɵtext(1, \"Delete\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ToDoComponent_td_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 16);\n    i0.ɵɵtemplate(1, ToDoComponent_td_22_button_1_Template, 2, 0, \"button\", 18);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const task_r20 = ctx.$implicit;\n    const ctx_r9 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(2, _c0, ctx_r9.addColor(task_r20)));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", task_r20.state === false);\n  }\n}\n\nfunction ToDoComponent_tr_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 19);\n  }\n}\n\nfunction ToDoComponent_tr_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 20);\n  }\n}\n\nexport let ToDoComponent = /*#__PURE__*/(() => {\n  class ToDoComponent {\n    constructor(objectivesService, dialog) {\n      this.objectivesService = objectivesService;\n      this.dialog = dialog;\n      this.listOfTasks = [];\n      this.currentTask = {\n        id: -2,\n        name: '',\n        task: '',\n        endDate: '',\n        email: '',\n        state: true\n      };\n      this.dataSource = new MatTableDataSource(this.listOfTasks);\n      this.displayedColumns = ['name', 'date', 'edit', 'checkbox', 'delete'];\n    }\n\n    ngOnInit() {\n      if (String(localStorage.getItem('list')) !== 'null') {\n        this.listOfTasks = JSON.parse(String(localStorage.getItem('list')));\n        this.listOfTasks = [...this.listOfTasks];\n      }\n\n      this.dataSource = new MatTableDataSource(this.listOfTasks);\n\n      this.dataSource.sortingDataAccessor = (item, property) => {\n        switch (property) {\n          case 'date':\n            return item.endDate;\n\n          default:\n            return property;\n        }\n      };\n\n      this.dataSource.sort = this.sort;\n      localStorage.setItem('list', JSON.stringify(this.listOfTasks));\n    }\n\n    ngAfterViewInit() {\n      this.dataSource.sort = this.sort;\n    }\n\n    openDialog() {\n      const dialogConfig = new MatDialogConfig();\n      dialogConfig.disableClose = true;\n      dialogConfig.autoFocus = true;\n      dialogConfig.data = {\n        name: this.currentTask.name,\n        endDate: this.currentTask.endDate,\n        email: this.currentTask.email,\n        task: this.currentTask.task\n      };\n      const dialogRef = this.dialog.open(DialogBoxComponent, dialogConfig);\n      dialogRef.afterClosed().subscribe(data => {\n        if (data === undefined) {\n          return;\n        }\n\n        this.currentTask.name = data[0].name;\n        this.currentTask.endDate = data[0].endDate;\n        this.currentTask.email = data[1].email;\n        this.currentTask.task = data[1].task;\n        this.addTask();\n      });\n    }\n\n    addTask() {\n      if (findIndex(this.listOfTasks, task => task.id === this.currentTask.id) !== -1) {\n        this.listOfTasks.splice(this.currentTask.id, 1, this.currentTask);\n        this.currentTask.endDate = moment(this.currentTask.endDate, \"YYYY-MM-DD h:mm:ss\").format(\"YYYY-MM-DD h:mm:ss\").toString();\n        localStorage.setItem('list', JSON.stringify(this.listOfTasks));\n      } else {\n        this.objectivesService.addTasktoList(this.currentTask);\n      }\n\n      this.listOfTasks = this.objectivesService.getList();\n      this.listOfTasks = [...this.listOfTasks];\n      this.dataSource = new MatTableDataSource(this.listOfTasks);\n\n      this.dataSource.sortingDataAccessor = (item, property) => {\n        switch (property) {\n          case 'date':\n            return item.endDate;\n\n          default:\n            return property;\n        }\n      };\n\n      this.dataSource.sort = this.sort;\n      this.currentTask = {\n        id: -2,\n        name: '',\n        task: '',\n        endDate: '',\n        email: '',\n        state: true\n      };\n    }\n\n    switchTask(task) {\n      this.objectivesService.switchState(task);\n      this.listOfTasks = JSON.parse(String(localStorage.getItem('list')));\n      this.dataSource = new MatTableDataSource(this.listOfTasks);\n\n      this.dataSource.sortingDataAccessor = (item, property) => {\n        switch (property) {\n          case 'date':\n            return item.endDate;\n\n          default:\n            return property;\n        }\n      };\n\n      this.dataSource.sort = this.sort;\n    }\n\n    clearMemory() {\n      localStorage.clear();\n      this.listOfTasks = JSON.parse(String(localStorage.getItem('list')));\n      this.objectivesService.clearMemory();\n    }\n\n    addColor(task) {\n      let currentDate = moment(Date());\n      let taskDate = moment(task.endDate);\n\n      if (task.state === false) {\n        return '#8e8e8e';\n      }\n\n      if (taskDate.diff(currentDate, 'hours') < 0) {\n        return 'red';\n      }\n\n      if (taskDate.diff(currentDate, 'hours') < 24) {\n        return 'orange';\n      }\n\n      if (taskDate.diff(currentDate, 'hours') < 48) {\n        return 'yellow';\n      }\n\n      if (taskDate.diff(currentDate, 'hours') < 72) {\n        return 'green';\n      }\n\n      return '#37a5f5';\n    }\n\n    deleteTask(task) {\n      this.listOfTasks.splice(findIndex(this.listOfTasks, task), 1);\n      this.listOfTasks = [...this.listOfTasks];\n      this.dataSource = new MatTableDataSource(this.listOfTasks);\n\n      this.dataSource.sortingDataAccessor = (item, property) => {\n        switch (property) {\n          case 'date':\n            return item.endDate;\n\n          default:\n            return property;\n        }\n      };\n\n      this.dataSource.sort = this.sort;\n      localStorage.setItem('list', JSON.stringify(this.listOfTasks));\n    }\n\n    editTask(id) {\n      this.currentTask = this.objectivesService.getTask(id);\n      this.openDialog();\n    }\n\n  }\n\n  ToDoComponent.ɵfac = function ToDoComponent_Factory(t) {\n    return new (t || ToDoComponent)(i0.ɵɵdirectiveInject(i1.ObjectivesService), i0.ɵɵdirectiveInject(i2.MatDialog));\n  };\n\n  ToDoComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ToDoComponent,\n    selectors: [[\"app-to-do\"]],\n    viewQuery: function ToDoComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(MatSort, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.sort = _t.first);\n      }\n    },\n    decls: 25,\n    vars: 3,\n    consts: [[\"mat-stroked-button\", \"\", 3, \"click\"], [\"mat-table\", \"\", \"matSort\", \"\", 3, \"dataSource\"], [\"matColumnDef\", \"name\"], [\"mat-header-cell\", \"\", 4, \"matHeaderCellDef\"], [\"mat-cell\", \"\", 3, \"ngStyle\", \"routerLink\", 4, \"matCellDef\"], [\"matColumnDef\", \"date\"], [\"mat-header-cell\", \"\", \"mat-sort-header\", \"\", 4, \"matHeaderCellDef\"], [\"mat-cell\", \"\", 3, \"ngStyle\", 4, \"matCellDef\"], [\"matColumnDef\", \"edit\"], [\"matColumnDef\", \"checkbox\"], [\"matColumnDef\", \"delete\"], [\"mat-header-row\", \"\", 4, \"matHeaderRowDef\"], [\"mat-row\", \"\", 4, \"matRowDef\", \"matRowDefColumns\"], [\"mat-header-cell\", \"\"], [\"mat-cell\", \"\", 3, \"ngStyle\", \"routerLink\"], [\"mat-header-cell\", \"\", \"mat-sort-header\", \"\"], [\"mat-cell\", \"\", 3, \"ngStyle\"], [3, \"click\"], [\"mat-stroked-button\", \"\", 3, \"click\", 4, \"ngIf\"], [\"mat-header-row\", \"\"], [\"mat-row\", \"\"]],\n    template: function ToDoComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\");\n        i0.ɵɵelementStart(1, \"button\", 0);\n        i0.ɵɵlistener(\"click\", function ToDoComponent_Template_button_click_1_listener() {\n          return ctx.openDialog();\n        });\n        i0.ɵɵtext(2, \"Add task\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\");\n        i0.ɵɵelementStart(4, \"button\", 0);\n        i0.ɵɵlistener(\"click\", function ToDoComponent_Template_button_click_4_listener() {\n          return ctx.clearMemory();\n        });\n        i0.ɵɵtext(5, \"Clear local memory\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"div\");\n        i0.ɵɵelementStart(7, \"table\", 1);\n        i0.ɵɵelementContainerStart(8, 2);\n        i0.ɵɵtemplate(9, ToDoComponent_th_9_Template, 2, 0, \"th\", 3);\n        i0.ɵɵtemplate(10, ToDoComponent_td_10_Template, 2, 5, \"td\", 4);\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵelementContainerStart(11, 5);\n        i0.ɵɵtemplate(12, ToDoComponent_th_12_Template, 2, 0, \"th\", 6);\n        i0.ɵɵtemplate(13, ToDoComponent_td_13_Template, 2, 4, \"td\", 7);\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵelementContainerStart(14, 8);\n        i0.ɵɵtemplate(15, ToDoComponent_th_15_Template, 2, 0, \"th\", 3);\n        i0.ɵɵtemplate(16, ToDoComponent_td_16_Template, 3, 3, \"td\", 7);\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵelementContainerStart(17, 9);\n        i0.ɵɵtemplate(18, ToDoComponent_th_18_Template, 2, 0, \"th\", 3);\n        i0.ɵɵtemplate(19, ToDoComponent_td_19_Template, 2, 3, \"td\", 7);\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵelementContainerStart(20, 10);\n        i0.ɵɵtemplate(21, ToDoComponent_th_21_Template, 2, 0, \"th\", 3);\n        i0.ɵɵtemplate(22, ToDoComponent_td_22_Template, 2, 4, \"td\", 7);\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵtemplate(23, ToDoComponent_tr_23_Template, 1, 0, \"tr\", 11);\n        i0.ɵɵtemplate(24, ToDoComponent_tr_24_Template, 1, 0, \"tr\", 12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"dataSource\", ctx.dataSource);\n        i0.ɵɵadvance(16);\n        i0.ɵɵproperty(\"matHeaderRowDef\", ctx.displayedColumns);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"matRowDefColumns\", ctx.displayedColumns);\n      }\n    },\n    directives: [i3.MatButton, i4.MatTable, i5.MatSort, i4.MatColumnDef, i4.MatHeaderCellDef, i4.MatCellDef, i4.MatHeaderRowDef, i4.MatRowDef, i4.MatHeaderCell, i4.MatCell, i6.NgStyle, i7.RouterLink, i5.MatSortHeader, i8.MatCheckbox, i6.NgIf, i4.MatHeaderRow, i4.MatRow],\n    styles: [\".form[_ngcontent-%COMP%]{display:block;width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;text-align:left center}div[_ngcontent-%COMP%]{margin-bottom:10px}.example-full-width[_ngcontent-%COMP%], .tasks[_ngcontent-%COMP%]{width:100%}.tasks[_ngcontent-%COMP%]{display:block;padding:25px}span[_ngcontent-%COMP%]{text-align:center;vertical-align:text-top;display:inline-block;width:45%;border:2px solid #000}table[_ngcontent-%COMP%]{width:100%}\"]\n  });\n  return ToDoComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}